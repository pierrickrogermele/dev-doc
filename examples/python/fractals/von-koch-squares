#!/usr/bin/env python

import sys, math
from PIL import Image, ImageDraw

#######################
# DRAW VON KOCH CURVE #
#######################

def draw_von_koch_curve(image, curve):

	draw = ImageDraw.Draw(image)

	# erase image
	draw.rectangle([(0,0), image.size], fill="white")

	# scale and reverse curve (on image y=0 is at top)
	scaled_curve = []
	for p in curve:
		scaled_curve.append((p[0] * (image.size[0] - 1), (1.0 - p[1]) * image.size[1]))

	# draw lines
	draw.line(scaled_curve)

#########################
# CREATE VON KOCH CURVE #
#########################

def create_von_koch_curve(n, image, filename):

	# incoherent value
	if n < 1:
		return []

	# first set
	if n == 1:
		von_koch_curve = [(0, 0.5), (1, 0.5)]

	else:
		von_koch_curve_n_1 = create_von_koch_curve(n-1, image, filename)
		von_koch_curve = []

		# loop on all points
		p = von_koch_curve_n_1[0]
		von_koch_curve.append(p)
		for q in von_koch_curve_n_1[1:]:

			# We replace the segment pq with the following path, where each segment has the same length (pq/3):
			#
			#       p2--------p3
			#       |         |
			#       |         |
			#       |         |
			#       |         |
			# p-----p1/p5-----p4/p8-----q
			#       |         |
			#       |         |
			#       |         |
			#       |         |
			#       p6--------p7

			# Is pq horizontal or vertical ?
			if abs(p[0] - q[0]) < abs(p[1] - q[1]):
				# vertical
				L = (q[1] - p[1]) / 3.0
				p1 = p5 = (p[0], p[1] + L)
				p4 = p8 = (q[0], q[1] - L)
				p2 = (p[0] - L, p1[1])
				p3 = (p[0] - L, p4[1])
				p6 = (p[0] + L, p1[1])
				p7 = (p[0] + L, p4[1])
			else:
				# horizontal
				L = (q[0] - p[0]) / 3.0
				p1 = p5 = (p[0] + L, p[1])
				p4 = p8 = (q[0] - L, q[1])
				p2 = (p1[0], p[1] + L)
				p3 = (p4[0], p[1] + L)
				p6 = (p1[0], p[1] - L)
				p7 = (p4[0], p[1] - L)

			# append the new points and q
			von_koch_curve.append(p1)
			von_koch_curve.append(p2)
			von_koch_curve.append(p3)
			von_koch_curve.append(p4)
			von_koch_curve.append(p5)
			von_koch_curve.append(p6)
			von_koch_curve.append(p7)
			von_koch_curve.append(p8)
			von_koch_curve.append(q)

			# make q the beginning of the next segment
			p = q

	# draw & save image
	draw_von_koch_curve(image, von_koch_curve)
	image.save(filename.format(n), "PNG")

	return von_koch_curve

########
# MAIN #
########

# Get program's name
prog_name = sys.argv[0]

# Read argument
n = int(sys.argv[1])

# Create image
im = Image.new("1", (512, 512), "white")

# Generate all images
create_von_koch_curve(n, image=im, filename=prog_name+'-{0:02d}.png')
